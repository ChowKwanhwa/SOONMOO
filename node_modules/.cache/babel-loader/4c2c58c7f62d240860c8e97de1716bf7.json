{"ast":null,"code":"import { Buffer } from 'buffer';\nimport { ed25519 } from '@noble/curves/ed25519';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { toBigIntLE, toBufferLE } from 'bigint-buffer';\nimport { coerce, instance, string, tuple, literal, unknown, type, number, array, nullable, optional, boolean, record, union, create, any, assert as assert$1 } from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport createRpc from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport { keccak_256 } from '@noble/hashes/sha3';\nimport { secp256k1 } from '@noble/curves/secp256k1';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\n\n/**\n * Ed25519 Keypair\n */\n\nconst generatePrivateKey = ed25519.utils.randomPrivateKey;\nconst generateKeypair = () => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey\n  };\n};\nconst getPublicKey = ed25519.getPublicKey;\nfunction isOnCurve(publicKey) {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nconst sign = (message, secretKey) => ed25519.sign(message, secretKey.slice(0, 32));\nconst verify = ed25519.verify;\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\n// Class wrapping a plain object\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\nconst SOLANA_SCHEMA = new Map();\nvar _PublicKey;\n\n/**\n * Maximum length of derived pubkey seed\n */\nconst MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nconst PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\n\n/**\n * JSON object representation of PublicKey class\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nclass PublicKey extends Struct {\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    /** @internal */\n    this._bn = void 0;\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(\"Invalid public key input\");\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(\"Invalid public key input\");\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique() {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n  toJSON() {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes() {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  get [Symbol.toStringTag]() {\n    return \"PublicKey(\".concat(this.toString(), \")\");\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString() {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(\"Max seed length exceeded\");\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(\"Invalid seeds, address must fall off the curve\");\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(seeds, programId) {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(\"Unable to find a viable program address nonce\");\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(seeds, programId) {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData) {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n_PublicKey = PublicKey;\nPublicKey.default = new _PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n});\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nclass Account {\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    /** @internal */\n    this._publicKey = void 0;\n    /** @internal */\n    this._secretKey = void 0;\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey() {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey() {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst VERSION_PREFIX_MASK = 0x7f;\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\nclass TransactionExpiredBlockheightExceededError extends Error {\n  constructor(signature) {\n    super(\"Signature \".concat(signature, \" has expired: block height exceeded.\"));\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\nclass TransactionExpiredTimeoutError extends Error {\n  constructor(signature, timeoutSeconds) {\n    super(\"Transaction was not confirmed in \".concat(timeoutSeconds.toFixed(2), \" seconds. It is \") + 'unknown if it succeeded or failed. Check signature ' + \"\".concat(signature, \" using the Solana Explorer or CLI tools.\"));\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\nclass TransactionExpiredNonceInvalidError extends Error {\n  constructor(signature) {\n    super(\"Signature \".concat(signature, \" has expired: the nonce is no longer valid.\"));\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError'\n});\nclass MessageAccountKeys {\n  constructor(staticAccountKeys, accountKeysFromLookups) {\n    this.staticAccountKeys = void 0;\n    this.accountKeysFromLookups = void 0;\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n  keySegments() {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n  get(index) {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n  get length() {\n    return this.keySegments().flat().length;\n  }\n  compileInstructions(instructions) {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n    const keyIndexMap = new Map();\n    this.keySegments().flat().forEach((key, index) => {\n      keyIndexMap.set(key.toBase58(), index);\n    });\n    const findKeyIndex = key => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined) throw new Error('Encountered an unknown instruction account key during compilation');\n      return keyIndex;\n    };\n    return instructions.map(instruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta => findKeyIndex(meta.pubkey)),\n        data: instruction.data\n      };\n    });\n  }\n}\n\n/**\n * Layout for a public key\n */\nconst publicKey = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'publicKey';\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nconst signature = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'signature';\n  return BufferLayout.blob(64, property);\n};\n/**\n * Layout for a Rust String type\n */\nconst rustString = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'string';\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n  const rslShim = rsl;\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n  rslShim.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nconst authorized = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'authorized';\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nconst lockup = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'lockup';\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n\n/**\n *  Layout for a VoteInit object\n */\nconst voteInit = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteInit';\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nconst voteAuthorizeWithSeedArgs = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteAuthorizeWithSeedArgs';\n  return BufferLayout.struct([BufferLayout.u32('voteAuthorizationType'), publicKey('currentAuthorityDerivedKeyOwnerPubkey'), rustString('currentAuthorityDerivedKeySeed'), publicKey('newAuthorized')], property);\n};\nfunction getAlloc(type, fields) {\n  const getItemAlloc = item => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({\n        layout: item\n      }, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\nclass CompiledKeys {\n  constructor(payer, keyMetaMap) {\n    this.payer = void 0;\n    this.keyMetaMap = void 0;\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n  static compile(instructions, payer) {\n    const keyMetaMap = new Map();\n    const getOrInsertDefault = pubkey => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner || (keyMeta.isSigner = accountMeta.isSigner);\n        keyMeta.isWritable || (keyMeta.isWritable = accountMeta.isWritable);\n      }\n    }\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n  getMessageComponents() {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n    const writableSigners = mapEntries.filter(_ref => {\n      let [, meta] = _ref;\n      return meta.isSigner && meta.isWritable;\n    });\n    const readonlySigners = mapEntries.filter(_ref2 => {\n      let [, meta] = _ref2;\n      return meta.isSigner && !meta.isWritable;\n    });\n    const writableNonSigners = mapEntries.filter(_ref3 => {\n      let [, meta] = _ref3;\n      return !meta.isSigner && meta.isWritable;\n    });\n    const readonlyNonSigners = mapEntries.filter(_ref4 => {\n      let [, meta] = _ref4;\n      return !meta.isSigner && !meta.isWritable;\n    });\n    const header = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length\n    };\n\n    // sanity checks\n    {\n      assert(writableSigners.length > 0, 'Expected at least one writable signer key');\n      const [payerAddress] = writableSigners[0];\n      assert(payerAddress === this.payer.toBase58(), 'Expected first writable signer key to be the fee payer');\n    }\n    const staticAccountKeys = [...writableSigners.map(_ref5 => {\n      let [address] = _ref5;\n      return new PublicKey(address);\n    }), ...readonlySigners.map(_ref6 => {\n      let [address] = _ref6;\n      return new PublicKey(address);\n    }), ...writableNonSigners.map(_ref7 => {\n      let [address] = _ref7;\n      return new PublicKey(address);\n    }), ...readonlyNonSigners.map(_ref8 => {\n      let [address] = _ref8;\n      return new PublicKey(address);\n    })];\n    return [header, staticAccountKeys];\n  }\n  extractTableLookup(lookupTable) {\n    const [writableIndexes, drainedWritableKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable);\n    const [readonlyIndexes, drainedReadonlyKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable);\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n    return [{\n      accountKey: lookupTable.key,\n      writableIndexes,\n      readonlyIndexes\n    }, {\n      writable: drainedWritableKeys,\n      readonly: drainedReadonlyKeys\n    }];\n  }\n\n  /** @internal */\n  drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry => entry.equals(key));\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\nconst END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nfunction guardedShift(byteArray) {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift();\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nfunction guardedSplice(byteArray) {\n  var _args$;\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  const [start] = args;\n  if (args.length === 2 // Implies that `deleteCount` was supplied\n  ? start + ((_args$ = args[1]) !== null && _args$ !== void 0 ? _args$ : 0) > byteArray.length : start >= byteArray.length) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(...args);\n}\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\n\n/**\n * Message constructor arguments\n */\n\n/**\n * List of instructions to be processed atomically\n */\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n  get version() {\n    return 'legacy';\n  }\n  get staticAccountKeys() {\n    return this.accountKeys;\n  }\n  get compiledInstructions() {\n    return this.instructions.map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accountKeyIndexes: ix.accounts,\n      data: bs58.decode(ix.data)\n    }));\n  }\n  get addressTableLookups() {\n    return [];\n  }\n  getAccountKeys() {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accounts: ix.accountKeyIndexes,\n      data: bs58.encode(ix.data)\n    }));\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions\n    });\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {\n      throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');\n    }\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n}\n\n/**\n * Message constructor arguments\n */\n\nclass MessageV0 {\n  constructor(args) {\n    this.header = void 0;\n    this.staticAccountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.compiledInstructions = void 0;\n    this.addressTableLookups = void 0;\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n  get version() {\n    return 0;\n  }\n  get numAccountKeysFromLookups() {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n  getAccountKeys(args) {\n    let accountKeysFromLookups;\n    if (args && 'accountKeysFromLookups' in args && args.accountKeysFromLookups) {\n      if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {\n        throw new Error('Failed to get account keys because of a mismatch in the number of account keys from lookups');\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (args && 'addressLookupTableAccounts' in args && args.addressLookupTableAccounts) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error('Failed to get account keys because address table lookups were not resolved');\n    }\n    return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce((count, lookup) => count + lookup.writableIndexes.length, 0);\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  resolveAddressTableLookups(addressLookupTableAccounts) {\n    const accountKeysFromLookups = {\n      writable: [],\n      readonly: []\n    };\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account => account.key.equals(tableLookup.accountKey));\n      if (!tableAccount) {\n        throw new Error(\"Failed to find address lookup table account for table key \".concat(tableLookup.accountKey.toBase58()));\n      }\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(\"Failed to find address for index \".concat(index, \" in address lookup table \").concat(tableLookup.accountKey.toBase58()));\n        }\n      }\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(\"Failed to find address for index \".concat(index, \" in address lookup table \").concat(tableLookup.accountKey.toBase58()));\n        }\n      }\n    }\n    return accountKeysFromLookups;\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const addressTableLookups = new Array();\n    const accountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array()\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {\n          writable,\n          readonly\n        }] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);\n    const compiledInstructions = accountKeys.compileInstructions(args.instructions);\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n  serialize() {\n    const encodedStaticAccountKeysLength = Array();\n    encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array();\n    encodeLength(encodedInstructionsLength, this.compiledInstructions.length);\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array();\n    encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);\n    const messageLayout = BufferLayout.struct([BufferLayout.u8('prefix'), BufferLayout.struct([BufferLayout.u8('numRequiredSignatures'), BufferLayout.u8('numReadonlySignedAccounts'), BufferLayout.u8('numReadonlyUnsignedAccounts')], 'header'), BufferLayout.blob(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), BufferLayout.seq(publicKey(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey('recentBlockhash'), BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'), BufferLayout.blob(serializedInstructions.length, 'serializedInstructions'), BufferLayout.blob(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), BufferLayout.blob(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode({\n      prefix: MESSAGE_VERSION_0_PREFIX,\n      header: this.header,\n      staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n      staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n      instructionsLength: new Uint8Array(encodedInstructionsLength),\n      serializedInstructions,\n      addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),\n      serializedAddressTableLookups\n    }, serializedMessage);\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n  serializeInstructions() {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array();\n      encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);\n      const encodedDataLength = Array();\n      encodeLength(encodedDataLength, instruction.data.length);\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'), BufferLayout.blob(instruction.data.length, 'data')]);\n      serializedLength += instructionLayout.encode({\n        programIdIndex: instruction.programIdIndex,\n        encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),\n        accountKeyIndexes: instruction.accountKeyIndexes,\n        encodedDataLength: new Uint8Array(encodedDataLength),\n        data: instruction.data\n      }, serializedInstructions, serializedLength);\n    }\n    return serializedInstructions.slice(0, serializedLength);\n  }\n  serializeAddressTableLookups() {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array();\n      encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);\n      const encodedReadonlyIndexesLength = Array();\n      encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);\n      const addressTableLookupLayout = BufferLayout.struct([publicKey('accountKey'), BufferLayout.blob(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.writableIndexes.length, 'writableIndexes'), BufferLayout.blob(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);\n      serializedLength += addressTableLookupLayout.encode({\n        accountKey: lookup.accountKey.toBytes(),\n        encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),\n        writableIndexes: lookup.writableIndexes,\n        encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),\n        readonlyIndexes: lookup.readonlyIndexes\n      }, serializedAddressTableLookups, serializedLength);\n    }\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n  static deserialize(serializedMessage) {\n    let byteArray = [...serializedMessage];\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(prefix !== maskedPrefix, \"Expected versioned message but received legacy message\");\n    const version = maskedPrefix;\n    assert(version === 0, \"Expected versioned message with version 0 but found version \".concat(version));\n    const header = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray)\n    };\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)));\n    }\n    const recentBlockhash = bs58.encode(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n    const instructionCount = decodeLength(byteArray);\n    const compiledInstructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(byteArray, 0, accountKeyIndexesLength);\n      const dataLength = decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data\n      });\n    }\n    const addressTableLookupsCount = decodeLength(byteArray);\n    const addressTableLookups = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = decodeLength(byteArray);\n      const writableIndexes = guardedSplice(byteArray, 0, writableIndexesLength);\n      const readonlyIndexesLength = decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(byteArray, 0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes\n      });\n    }\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n}\n\n// eslint-disable-next-line no-redeclare\nconst VersionedMessage = {\n  deserializeMessageVersion(serializedMessage) {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n  deserialize: serializedMessage => {\n    const version = VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\"Transaction message version \".concat(version, \" deserialization is not supported\"));\n    }\n  }\n};\n\n/** @internal */\n\n/**\n * Transaction signature as base-58 encoded string\n */\n\nlet TransactionStatus = /*#__PURE__*/function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n  TransactionStatus[TransactionStatus[\"NONCE_INVALID\"] = 3] = \"NONCE_INVALID\";\n  return TransactionStatus;\n}({});\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\n\n/**\n * Configuration object for Transaction.serialize()\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction Instruction class\n */\nclass TransactionInstruction {\n  constructor(opts) {\n    /**\n     * Public keys to include in this transaction\n     * Boolean represents whether this pubkey needs to sign the transaction\n     */\n    this.keys = void 0;\n    /**\n     * Program Id to execute\n     */\n    this.programId = void 0;\n    /**\n     * Program input\n     */\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      keys: this.keys.map(_ref9 => {\n        let {\n          pubkey,\n          isSigner,\n          isWritable\n        } = _ref9;\n        return {\n          pubkey: pubkey.toJSON(),\n          isSigner,\n          isWritable\n        };\n      }),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction class\n */\nclass Transaction {\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n\n  // Construct a transaction using a durable nonce\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts) {\n    /**\n     * Signatures for the transaction.  Typically created by invoking the\n     * `sign()` method\n     */\n    this.signatures = [];\n    this.feePayer = void 0;\n    /**\n     * The instructions to atomically execute\n     */\n    this.instructions = [];\n    /**\n     * A recent transaction id. Must be populated by the caller\n     */\n    this.recentBlockhash = void 0;\n    /**\n     * the last block chain can advance to before tx is declared expired\n     * */\n    this.lastValidBlockHeight = void 0;\n    /**\n     * Optional Nonce information. If populated, transaction will use a durable\n     * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n     */\n    this.nonceInfo = void 0;\n    /**\n     * If this is a nonce transaction this represents the minimum slot from which\n     * to evaluate if the nonce has advanced when attempting to confirm the\n     * transaction. This protects against a case where the transaction confirmation\n     * logic loads the nonce account from an old slot and assumes the mismatch in\n     * nonce value implies that the nonce has been advanced.\n     */\n    this.minNonceContextSlot = void 0;\n    /**\n     * @internal\n     */\n    this._message = void 0;\n    /**\n     * @internal\n     */\n    this._json = void 0;\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {\n        minContextSlot,\n        nonceInfo\n      } = opts;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {\n        blockhash,\n        lastValidBlockHeight\n      } = opts;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {\n        recentBlockhash,\n        nonceInfo\n      } = opts;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(_ref10 => {\n        let {\n          publicKey\n        } = _ref10;\n        return publicKey.toJSON();\n      })\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add() {\n    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      items[_key2] = arguments[_key2];\n    }\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage() {\n    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n      return this._message;\n    }\n    let recentBlockhash;\n    let instructions;\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n    let feePayer;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\"Transaction instruction index \".concat(i, \" has undefined program id\"));\n      }\n    }\n    const programIds = [];\n    const accountMetas = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({\n          ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower'\n      };\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(\"unknown signer: \".concat(signature.publicKey.toString()));\n      }\n    }\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(_ref11 => {\n      let {\n        pubkey,\n        isSigner,\n        isWritable\n      } = _ref11;\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions = instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    compiledInstructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners() {\n    for (var _len3 = arguments.length, signers = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      signers[_key3] = arguments[_key3];\n    }\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign() {\n    for (var _len4 = arguments.length, signers = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      signers[_key4] = arguments[_key4];\n    }\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign() {\n    for (var _len5 = arguments.length, signers = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      signers[_key5] = arguments[_key5];\n    }\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message) {\n    const signData = message.serialize();\n    for (var _len6 = arguments.length, signers = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n      signers[_key6 - 1] = arguments[_key6];\n    }\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n    if (index < 0) {\n      throw new Error(\"unknown signer: \".concat(pubkey.toString()));\n    }\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures() {\n    let requireAllSignatures = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    const signatureErrors = this._getMessageSignednessErrors(this.serializeMessage(), requireAllSignatures);\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(message, requireAllSignatures) {\n    const errors = {};\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing || (errors.missing = [])).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid || (errors.invalid = [])).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(signData, requireAllSignatures);\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += \"\\nInvalid signature for public key\".concat(sigErrors.invalid.length === 1 ? '' : '(s)', \" [`\").concat(sigErrors.invalid.map(p => p.toBase58()).join('`, `'), \"`].\");\n        }\n        if (sigErrors.missing) {\n          errorMessage += \"\\nMissing signature for public key\".concat(sigErrors.missing.length === 1 ? '' : '(s)', \" [`\").concat(sigErrors.missing.map(p => p.toBase58()).join('`, `'), \"`].\");\n        }\n        throw new Error(errorMessage);\n      }\n    }\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach((_ref12, index) => {\n      let {\n        signature\n      } = _ref12;\n      if (signature !== null) {\n        assert(signature.length === 64, \"signature has invalid length\");\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, \"Transaction too large: \".concat(wireTransaction.length, \" > \").concat(PACKET_DATA_SIZE));\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(message) {\n    let signatures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n    return transaction;\n  }\n}\nclass TransactionMessage {\n  constructor(args) {\n    this.payerKey = void 0;\n    this.instructions = void 0;\n    this.recentBlockhash = void 0;\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n  static decompile(message, args) {\n    const {\n      header,\n      compiledInstructions,\n      recentBlockhash\n    } = message;\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts\n    } = header;\n    const numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n    const numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error('Failed to decompile message because no account keys were found');\n    }\n    const instructions = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys = [];\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(\"Failed to find key for account key index \".concat(keyIndex));\n        }\n        const isSigner = keyIndex < numRequiredSignatures;\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable = keyIndex - accountKeys.staticAccountKeys.length <\n          // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n          accountKeys.accountKeysFromLookups.writable.length;\n        }\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable\n        });\n      }\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(\"Failed to find program id for program id index \".concat(compiledIx.programIdIndex));\n      }\n      instructions.push(new TransactionInstruction({\n        programId,\n        data: toBuffer(compiledIx.data),\n        keys\n      }));\n    }\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash\n    });\n  }\n  compileToLegacyMessage() {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions\n    });\n  }\n  compileToV0Message(addressLookupTableAccounts) {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts\n    });\n  }\n}\n\n/**\n * Versioned transaction class\n */\nclass VersionedTransaction {\n  get version() {\n    return this.message.version;\n  }\n  constructor(message, signatures) {\n    this.signatures = void 0;\n    this.message = void 0;\n    if (signatures !== undefined) {\n      assert(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n  serialize() {\n    const serializedMessage = this.message.serialize();\n    const encodedSignaturesLength = Array();\n    encodeLength(encodedSignaturesLength, this.signatures.length);\n    const transactionLayout = BufferLayout.struct([BufferLayout.blob(encodedSignaturesLength.length, 'encodedSignaturesLength'), BufferLayout.seq(signature(), this.signatures.length, 'signatures'), BufferLayout.blob(serializedMessage.length, 'serializedMessage')]);\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode({\n      encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n      signatures: this.signatures,\n      serializedMessage\n    }, serializedTransaction);\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n  static deserialize(serializedTransaction) {\n    let byteArray = [...serializedTransaction];\n    const signatures = [];\n    const signaturesLength = decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)));\n    }\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n  sign(signers) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(signer.publicKey));\n      assert(signerIndex >= 0, \"Cannot sign with non signer key \".concat(signer.publicKey.toBase58()));\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n  addSignature(publicKey, signature) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(publicKey));\n    assert(signerIndex >= 0, \"Can not add signature; `\".concat(publicKey.toBase58(), \"` is not required to sign this transaction\"));\n    this.signatures[signerIndex] = signature;\n  }\n}\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nconst NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nconst DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  let status;\n  if (transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null) {\n    status = (await connection.confirmTransaction({\n      abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,\n      signature: signature,\n      blockhash: transaction.recentBlockhash,\n      lastValidBlockHeight: transaction.lastValidBlockHeight\n    }, options && options.commitment)).value;\n  } else if (transaction.minNonceContextSlot != null && transaction.nonceInfo != null) {\n    const {\n      nonceInstruction\n    } = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (await connection.confirmTransaction({\n      abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,\n      minContextSlot: transaction.minNonceContextSlot,\n      nonceAccountPubkey,\n      nonceValue: transaction.nonceInfo.nonce,\n      signature\n    }, options && options.commitment)).value;\n  } else {\n    if ((options === null || options === void 0 ? void 0 : options.abortSignal) != null) {\n      console.warn('sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' + 'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' + 'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.');\n    }\n    status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n  }\n  if (status.err) {\n    throw new Error(\"Transaction \".concat(signature, \" failed (\").concat(JSON.stringify(status), \")\"));\n  }\n  return signature;\n}\n\n// zzz\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * @internal\n */\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nfunction decodeData$1(type, buffer) {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (data.instruction !== type.index) {\n    throw new Error(\"invalid instruction; instruction index mismatch \".concat(data.instruction, \" != \").concat(type.index));\n  }\n  return data;\n}\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\n\n/**\n * NonceAccount class\n */\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n}\nconst encodeDecode = layout => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {\n    decode,\n    encode\n  };\n};\nconst bigInt = length => property => {\n  const layout = blob(length, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return toBigIntLE(Buffer.from(src));\n  };\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = toBufferLE(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n  return bigIntLayout;\n};\nconst u64 = bigInt(8);\n\n/**\n * Create account system transaction params\n */\n\n/**\n * Transfer system transaction params\n */\n\n/**\n * Assign system transaction params\n */\n\n/**\n * Create account with seed system transaction params\n */\n\n/**\n * Create nonce account system transaction params\n */\n\n/**\n * Create nonce account with seed system transaction params\n */\n\n/**\n * Initialize nonce account system instruction params\n */\n\n/**\n * Advance nonce account system instruction params\n */\n\n/**\n * Withdraw nonce account system transaction params\n */\n\n/**\n * Authorize nonce account system transaction params\n */\n\n/**\n * Allocate account system transaction params\n */\n\n/**\n * Allocate account with seed system transaction params\n */\n\n/**\n * Assign account with seed system transaction params\n */\n\n/**\n * Transfer with seed system transaction params\n */\n\n/** Decoded transfer system transaction instruction */\n\n/** Decoded transferWithSeed system transaction instruction */\n\n/**\n * System Instruction class\n */\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports)\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return 2 * (\n    // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 +\n    // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length);\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      }));\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(transaction, [payer, program], {\n        preflightCommitment: deployCommitment\n      });\n      const {\n        context,\n        value\n      } = await connection.confirmTransaction({\n        signature: finalizeSignature,\n        lastValidBlockHeight: transaction.lastValidBlockHeight,\n        blockhash: transaction.recentBlockhash\n      }, deployCommitment);\n      if (value.err) {\n        throw new Error(\"Transaction \".concat(finalizeSignature, \" failed (\").concat(JSON.stringify(value), \")\"));\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve => setTimeout(resolve, Math.round(MS_PER_SLOT / 2)));\n      }\n    }\n\n    // success\n    return true;\n  }\n}\nLoader.chunkSize = CHUNK_SIZE;\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\nfunction getDefaultExportFromCjs(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\nvar objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var name in obj) {\n    keys.push(name);\n  }\n  return keys;\n};\nfunction stringify(val, isArrayProp) {\n  var i, max, str, keys, key, propVal, toStr;\n  if (val === true) {\n    return \"true\";\n  }\n  if (val === false) {\n    return \"false\";\n  }\n  switch (typeof val) {\n    case \"object\":\n      if (val === null) {\n        return null;\n      } else if (val.toJSON && typeof val.toJSON === \"function\") {\n        return stringify(val.toJSON(), isArrayProp);\n      } else {\n        toStr = objToString.call(val);\n        if (toStr === \"[object Array]\") {\n          str = '[';\n          max = val.length - 1;\n          for (i = 0; i < max; i++) {\n            str += stringify(val[i], true) + ',';\n          }\n          if (max > -1) {\n            str += stringify(val[i], true);\n          }\n          return str + ']';\n        } else if (toStr === \"[object Object]\") {\n          // only object is left\n          keys = objKeys(val).sort();\n          max = keys.length;\n          str = \"\";\n          i = 0;\n          while (i < max) {\n            key = keys[i];\n            propVal = stringify(val[key], false);\n            if (propVal !== undefined) {\n              if (str) {\n                str += ',';\n              }\n              str += JSON.stringify(key) + ':' + propVal;\n            }\n            i++;\n          }\n          return '{' + str + '}';\n        } else {\n          return JSON.stringify(val);\n        }\n      }\n    case \"function\":\n    case \"undefined\":\n      return isArrayProp ? null : undefined;\n    case \"string\":\n      return JSON.stringify(val);\n    default:\n      return isFinite(val) ? val : null;\n  }\n}\nvar fastStableStringify = function (val) {\n  var returnVal = stringify(val, false);\n  if (returnVal !== undefined) {\n    return '' + returnVal;\n  }\n};\nvar fastStableStringify$1 = /*@__PURE__*/getDefaultExportFromCjs(fastStableStringify);\nconst MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nclass EpochSchedule {\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    /** The maximum number of slots in each epoch */\n    this.slotsPerEpoch = void 0;\n    /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n    this.leaderScheduleSlotOffset = void 0;\n    /** Indicates whether epochs start short and grow */\n    this.warmup = void 0;\n    /** The first epoch with `slotsPerEpoch` slots */\n    this.firstNormalEpoch = void 0;\n    /** The first slot of `firstNormalEpoch` */\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\nclass SendTransactionError extends Error {\n  constructor(message, logs) {\n    super(message);\n    this.logs = void 0;\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nconst SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\nclass SolanaJSONRPCError extends Error {\n  constructor(_ref13, customMessage) {\n    let {\n      code,\n      message,\n      data\n    } = _ref13;\n    super(customMessage != null ? \"\".concat(customMessage, \": \").concat(message) : message);\n    this.code = void 0;\n    this.data = void 0;\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\nvar fetchImpl = globalThis.fetch;\nclass RpcWebSocketClient extends RpcWebSocketCommonClient {\n  constructor(address, options, generate_request_id) {\n    const webSocketFactory = url => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket;\n      } else {\n        this.underlyingSocket = rpc;\n      }\n      return rpc;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n    this.underlyingSocket = void 0;\n  }\n  call() {\n    var _this$underlyingSocke;\n    const readyState = (_this$underlyingSocke = this.underlyingSocket) === null || _this$underlyingSocke === void 0 ? void 0 : _this$underlyingSocke.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...arguments);\n    }\n    return Promise.reject(new Error('Tried to call a JSON-RPC method `' + (arguments.length <= 0 ? undefined : arguments[0]) + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n  notify() {\n    var _this$underlyingSocke2;\n    const readyState = (_this$underlyingSocke2 = this.underlyingSocket) === null || _this$underlyingSocke2 === void 0 ? void 0 : _this$underlyingSocke2.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...arguments);\n    }\n    return Promise.reject(new Error('Tried to send a JSON-RPC notification `' + (arguments.length <= 0 ? undefined : arguments[0]) + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n}\n\n/**\n * @internal\n */\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nfunction decodeData(type, data) {\n  let decoded;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\"invalid account data; account type mismatch \".concat(decoded.typeIndex, \" != \").concat(type.index));\n  }\n  return decoded;\n}\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\nclass AddressLookupTableAccount {\n  constructor(args) {\n    this.key = void 0;\n    this.state = void 0;\n    this.key = args.key;\n    this.state = args.state;\n  }\n  isActive() {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n  static deserialize(accountData) {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {\n      addresses\n    } = BufferLayout.struct([BufferLayout.seq(publicKey(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,\n      addresses: addresses.map(address => new PublicKey(address))\n    };\n  }\n}\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct([BufferLayout.u32('typeIndex'), u64('deactivationSlot'), BufferLayout.nu64('lastExtendedSlot'), BufferLayout.u8('lastExtendedStartIndex'), BufferLayout.u8(),\n  // option\n  BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u8(), -1), 'authority')])\n};\nconst URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\nfunction makeWebsocketUrl(endpoint) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(\"Failed to validate endpoint URL `\".concat(endpoint, \"`\"));\n  }\n  const [_,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  hostish, portWithColon, rest] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  startPort == null ? '' : \":\".concat(startPort + 1);\n  return \"\".concat(protocol, \"//\").concat(hostish).concat(websocketPort).concat(rest);\n}\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/** @internal */\n/** @internal */\n/** @internal */\n/** @internal */\n\n/** @internal */\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\n\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\n\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\n\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\n\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\n\n/**\n * @internal\n */\n\n/**\n * Extra contextual information for RPC responses\n */\n\n/**\n * Options for sending transactions\n */\n\n/**\n * Options for confirming transactions\n */\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\n\n/**\n * Options for getSignaturesForAddress\n */\n\n/**\n * RPC Response with extra contextual information\n */\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\n\n/**\n * This type represents all transaction confirmation strategies\n */\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  let commitment;\n  let config;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {\n      commitment: specifiedCommitment,\n      ...specifiedConfig\n    } = commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {\n    commitment,\n    config\n  };\n}\n\n/**\n * @internal\n */\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(version, response) {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(accountKey => new PublicKey(accountKey)),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data)\n      })),\n      addressTableLookups: response.addressTableLookups\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n// Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\n\n/**\n * Configuration object for changing query behavior\n */\n\n/**\n * Information describing a cluster node\n */\n\n/**\n * Information describing a vote account\n */\n\n/**\n * A collection of cluster vote accounts\n */\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number(),\n  commission: optional(nullable(number()))\n}))));\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(type({\n  slot: number(),\n  prioritizationFee: number()\n}));\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = type({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number()\n});\n\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number()),\n  returnData: optional(nullable(type({\n    programId: string(),\n    data: tuple([string(), literal('base64')])\n  })))\n}));\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction message from the RPC API\n */\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * A partially decoded transaction instruction\n */\n\n/**\n * A parsed transaction message account\n */\n\n/**\n * A parsed transaction instruction\n */\n\n/**\n * A parsed address table lookup\n */\n\n/**\n * A parsed transaction message\n */\n\n/**\n * A parsed transaction\n */\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\n\n/**\n * A parsed transaction on the ledger with meta\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A block with parsed transactions\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * A Block on the ledger with signatures only\n */\n\n/**\n * recent block production information\n */\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent) {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent;\n  {\n    if (httpAgent != null) {\n      console.warn('You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' + 'It has been ignored; `httpAgent` is only used in Node environments.');\n    }\n  }\n  let fetchWithMiddleware;\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(info, init, (modifiedInfo, modifiedInit) => resolve([modifiedInfo, modifiedInit]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n    };\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(\"Server responded with \".concat(res.status, \" \").concat(res.statusText, \".  Retrying after \").concat(waitTime, \"ms delay...\"));\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(\"\".concat(res.status, \" \").concat(res.statusText, \": \").concat(text)));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n  return clientBrowser;\n}\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(GetRecentPrioritizationFeesResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n\n/**\n * @internal\n */\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst AddressTableLookupStruct = type({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number())\n});\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct))\n  })\n});\nconst AnnotatedAccountKey = type({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')]))\n});\nconst ConfirmedTransactionAccountsModeResult = type({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string())\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\nconst LoadedAddressesResult = type({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString)\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = type({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number()))\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ParsedConfirmedTransactionResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: nullable(ConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult,\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * Parsed account data\n */\n\n/**\n * Stake Activation data\n */\n\n/**\n * Data slice argument for getProgramAccounts\n */\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\n\n/**\n * A filter object for getProgramAccounts\n */\n\n/**\n * Configuration object for getProgramAccounts requests\n */\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\n\n/**\n * Configuration object for getMultipleAccounts\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getNonce`\n */\n\n/**\n * Configuration object for `getNonceAndContext`\n */\n\n/**\n * Information describing an account\n */\n\n/**\n * Account information identified by pubkey\n */\n\n/**\n * Callback function for account change notifications\n */\n\n/**\n * Callback function for program account change notifications\n */\n\n/**\n * Callback function for slot change notifications\n */\n\n/**\n * Callback function for slot update notifications\n */\n\n/**\n * Callback function for signature status notifications\n */\n\n/**\n * Signature status notification with transaction result\n */\n\n/**\n * Signature received notification\n */\n\n/**\n * Callback function for signature notifications\n */\n\n/**\n * Signature subscription options\n */\n\n/**\n * Callback function for root change notifications\n */\n\n/**\n * @internal\n */\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * Callback function for log notifications.\n */\n\n/**\n * Signature result\n */\n\n/**\n * Transaction error\n */\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Signature status\n */\n\n/**\n * A confirmed signature with its status\n */\n\n/**\n * An object defining headers to be passed to the RPC server\n */\n\n/**\n * The type of the JavaScript `fetch()` API\n */\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\n\n/**\n * Configuration for instantiating a Connection\n */\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': \"js/\".concat(\"0.0.0-development\")\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nclass Connection {\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, _commitmentOrConfig) {\n    /** @internal */\n    this._commitment = void 0;\n    /** @internal */\n    this._confirmTransactionInitialTimeout = void 0;\n    /** @internal */\n    this._rpcEndpoint = void 0;\n    /** @internal */\n    this._rpcWsEndpoint = void 0;\n    /** @internal */\n    this._rpcClient = void 0;\n    /** @internal */\n    this._rpcRequest = void 0;\n    /** @internal */\n    this._rpcBatchRequest = void 0;\n    /** @internal */\n    this._rpcWebSocket = void 0;\n    /** @internal */\n    this._rpcWebSocketConnected = false;\n    /** @internal */\n    this._rpcWebSocketHeartbeat = null;\n    /** @internal */\n    this._rpcWebSocketIdleTimeout = null;\n    /** @internal\n     * A number that we increment every time an active connection closes.\n     * Used to determine whether the same socket connection that was open\n     * when an async operation started is the same one that's active when\n     * its continuation fires.\n     *\n     */\n    this._rpcWebSocketGeneration = 0;\n    /** @internal */\n    this._disableBlockhashCaching = false;\n    /** @internal */\n    this._pollingBlockhash = false;\n    /** @internal */\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    /** @internal */\n    this._nextClientSubscriptionId = 0;\n    /** @internal */\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionHashByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionStateChangeCallbacksByHash = {};\n    /** @internal */\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    /** @internal */\n    this._subscriptionsByHash = {};\n    /**\n     * Special case.\n     * After a signature is processed, RPCs automatically dispose of the\n     * subscription on the server side. We need to track which of these\n     * subscriptions have been disposed in such a way, so that we know\n     * whether the client is dealing with a not-yet-processed signature\n     * (in which case we must tear down the server subscription) or an\n     * already-processed signature (in which case the client can simply\n     * clear out the subscription locally without telling the server).\n     *\n     * NOTE: There is a proposal to eliminate this special case, here:\n     * https://github.com/solana-labs/solana/issues/18892\n     */\n    /** @internal */\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    /*\n     * Returns the current block height of the node\n     */\n    this.getBlockHeight = (() => {\n      const requestPromises = {};\n      return async commitmentOrConfig => {\n        var _requestPromises$requ;\n        const {\n          commitment,\n          config\n        } = extractCommitmentFromConfig(commitmentOrConfig);\n        const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n        const requestHash = fastStableStringify$1(args);\n        requestPromises[requestHash] = (_requestPromises$requ = requestPromises[requestHash]) !== null && _requestPromises$requ !== void 0 ? _requestPromises$requ : (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n        return await requestPromises[requestHash];\n      };\n    })();\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (_commitmentOrConfig && typeof _commitmentOrConfig === 'string') {\n      this._commitment = _commitmentOrConfig;\n    } else if (_commitmentOrConfig) {\n      this._commitment = _commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = _commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = _commitmentOrConfig.wsEndpoint;\n      httpHeaders = _commitmentOrConfig.httpHeaders;\n      fetch = _commitmentOrConfig.fetch;\n      fetchMiddleware = _commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = _commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = _commitmentOrConfig.httpAgent;\n    }\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment() {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(publicKey, commitmentOrConfig) {\n    /** @internal */\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, \"failed to get balance for \".concat(publicKey.toBase58()));\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(publicKey, commitmentOrConfig) {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, \"failed to get block time for slot \".concat(slot));\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(config) {\n    let configArg = {};\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(ownerAddress, filter, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, \"failed to get token accounts owned by account \".concat(ownerAddress.toBase58()));\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, \"failed to get token accounts owned by account \".concat(ownerAddress.toBase58()));\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(config) {\n    const arg = {\n      ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, \"failed to get info about account \".concat(publicKey.toBase58()));\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, \"failed to get info about account \".concat(publicKey.toBase58()));\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(publicKey, commitmentOrConfig) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(publicKeys, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, \"failed to get info for accounts \".concat(keys));\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, \"failed to get info for accounts \".concat(keys));\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(publicKeys, commitmentOrConfig) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(publicKey, commitmentOrConfig, epoch) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, \"failed to get Stake Activation \".concat(publicKey.toBase58()));\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const {\n      encoding,\n      ...configWithoutEncoding\n    } = config || {};\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', configWithoutEncoding);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res = configWithoutEncoding.withContext === true ? create(unsafeRes, jsonRpcResultAndContext(baseSchema)) : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, \"failed to get accounts owned by program \".concat(programId.toBase58()));\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, \"failed to get accounts owned by program \".concat(programId.toBase58()));\n    }\n    return res.result;\n  }\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(strategy, commitment) {\n    let rawSignature;\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      var _config$abortSignal;\n      const config = strategy;\n      if ((_config$abortSignal = config.abortSignal) !== null && _config$abortSignal !== void 0 && _config$abortSignal.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    }\n  }\n  getCancellationPromise(signal) {\n    return new Promise((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n  getTransactionConfirmationPromise(_ref14) {\n    let {\n      commitment,\n      signature\n    } = _ref14;\n    let signatureSubscriptionId;\n    let disposeSignatureSubscriptionStateChangeObserver;\n    let done = false;\n    const confirmationPromise = new Promise((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(signature, (result, context) => {\n          signatureSubscriptionId = undefined;\n          const response = {\n            context,\n            value: result\n          };\n          resolve({\n            __type: TransactionStatus.PROCESSED,\n            response\n          });\n        }, commitment);\n        const subscriptionSetupPromise = new Promise(resolveSubscriptionSetup => {\n          if (signatureSubscriptionId == null) {\n            resolveSubscriptionSetup();\n          } else {\n            disposeSignatureSubscriptionStateChangeObserver = this._onSubscriptionStateChange(signatureSubscriptionId, nextState => {\n              if (nextState === 'subscribed') {\n                resolveSubscriptionSetup();\n              }\n            });\n          }\n        });\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {\n            context,\n            value\n          } = response;\n          if (value == null) {\n            return;\n          }\n          if (value !== null && value !== void 0 && value.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip':\n                {\n                  if (value.confirmationStatus === 'processed') {\n                    return;\n                  }\n                  break;\n                }\n              case 'finalized':\n              case 'max':\n              case 'root':\n                {\n                  if (value.confirmationStatus === 'processed' || value.confirmationStatus === 'confirmed') {\n                    return;\n                  }\n                  break;\n                }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value\n              }\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {\n      abortConfirmation,\n      confirmationPromise\n    };\n  }\n  async confirmTransactionUsingBlockHeightExceedanceStrategy(_ref15) {\n    let {\n      commitment,\n      strategy: {\n        abortSignal,\n        lastValidBlockHeight,\n        signature\n      }\n    } = _ref15;\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({\n          __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n        });\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingDurableNonceStrategy(_ref16) {\n    let {\n      commitment,\n      strategy: {\n        abortSignal,\n        minContextSlot,\n        nonceAccountPubkey,\n        nonceValue,\n        signature\n      }\n    } = _ref16;\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      let currentNonceValue = nonceValue;\n      let lastCheckedSlot = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {\n            context,\n            value: nonceAccount\n          } = await this.getNonceAndContext(nonceAccountPubkey, {\n            commitment,\n            minContextSlot\n          });\n          lastCheckedSlot = context.slot;\n          return nonceAccount === null || nonceAccount === void 0 ? void 0 : nonceAccount.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        var _signatureStatus;\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          var _outcome$slotInWhichN;\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (status.context.slot < ((_outcome$slotInWhichN = outcome.slotInWhichNonceDidAdvance) !== null && _outcome$slotInWhichN !== void 0 ? _outcome$slotInWhichN : minContextSlot)) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if ((_signatureStatus = signatureStatus) !== null && _signatureStatus !== void 0 && _signatureStatus.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {\n            confirmationStatus\n          } = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (confirmationStatus !== 'processed' && confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              (_ => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {\n              err: signatureStatus.value.err\n            }\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingLegacyTimeoutStrategy(_ref17) {\n    let {\n      commitment,\n      signature\n    } = _ref17;\n    let timeoutId;\n    const expiryPromise = new Promise(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip':\n          {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n      }\n      timeoutId = setTimeout(() => resolve({\n        __type: TransactionStatus.TIMED_OUT,\n        timeoutMs\n      }), timeoutMs);\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    let result;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(signature, outcome.timeoutMs / 1000);\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(addresses, epoch, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate() {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(limit) {\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(config) {\n    var _config$lockedWritabl;\n    const accounts = config === null || config === void 0 ? void 0 : (_config$lockedWritabl = config.lockedWritableAccounts) === null || _config$lockedWritabl === void 0 ? void 0 : _config$lockedWritabl.map(key => key.toBase58());\n    const args = accounts !== null && accounts !== void 0 && accounts.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest('getRecentPrioritizationFees', args);\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent prioritization fees');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(commitmentOrConfig) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(blockhash, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs([blockhash], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to determine if the blockhash `' + blockhash + '`is valid');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config === null || config === void 0 ? void 0 : config.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            const {\n              result\n            } = res;\n            return result ? {\n              ...result,\n              transactions: result.transactions.map(_ref18 => {\n                let {\n                  transaction,\n                  meta,\n                  version\n                } = _ref18;\n                return {\n                  meta,\n                  transaction: {\n                    ...transaction,\n                    message: versionedMessageFromResponse(version, transaction.message)\n                  },\n                  version\n                };\n              })\n            } : null;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get confirmed block');\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config === null || config === void 0 ? void 0 : config.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetParsedBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get block');\n    }\n  }\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(signature, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(result.version, result.transaction.message)\n      }\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(signature, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(result.version, result.transaction.message)\n        }\n      };\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    const block = {\n      ...result,\n      transactions: result.transactions.map(_ref19 => {\n        let {\n          transaction,\n          meta\n        } = _ref19;\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return {\n      ...block,\n      transactions: block.transactions.map(_ref20 => {\n        let {\n          transaction,\n          meta\n        } = _ref20;\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n    }\n    return res.result;\n  }\n  async getAddressLookupTable(accountKey, config) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(accountKey, config);\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data)\n      });\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(nonceAccount, commitmentOrConfig) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitmentOrConfig);\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(nonceAccount, commitmentOrConfig) {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, \"airdrop to \".concat(to.toBase58(), \" failed\"));\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n      throw new Error(\"Unable to obtain a new blockhash after \".concat(Date.now() - startTime, \"ms\"));\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(config) {\n    const {\n      commitment,\n      config: configArg\n    } = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, \"failed to get stake minimum delegation\");\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(transactionOrMessage, configOrSigners, includeAccounts) {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction = Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n      const config = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        if (!signers) break;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n    if (signers) {\n      config.sigVerify = true;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(transaction, signersOrOptions, options) {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = skipPreflight === true ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n    : options && options.preflightCommitment || this.commitment;\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(this._subscriptionsByHash).forEach(_ref21 => {\n      let [hash, subscription] = _ref21;\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending'\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _setSubscription(hash, nextSubscription) {\n    var _this$_subscriptionsB;\n    const prevState = (_this$_subscriptionsB = this._subscriptionsByHash[hash]) === null || _this$_subscriptionsB === void 0 ? void 0 : _this$_subscriptionsB.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onSubscriptionStateChange(clientSubscriptionId, callback) {\n    var _this$_subscriptionSt;\n    const hash = this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (_this$_subscriptionSt = this._subscriptionStateChangeCallbacksByHash)[hash] || (_this$_subscriptionSt[hash] = new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\"Error when closing socket connection: \".concat(err.message));\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n    await Promise.all(\n    // Don't be tempted to change this to `Object.entries`. We call\n    // `_updateSubscriptions` recursively when processing the state,\n    // so it's important that we look up the *current* version of\n    // each subscription, every time we process a hash.\n    Object.keys(this._subscriptionsByHash).map(async hash => {\n      const subscription = this._subscriptionsByHash[hash];\n      if (subscription === undefined) {\n        // This entry has since been deleted. Skip.\n        return;\n      }\n      switch (subscription.state) {\n        case 'pending':\n        case 'unsubscribed':\n          if (subscription.callbacks.size === 0) {\n            /**\n             * You can end up here when:\n             *\n             * - a subscription has recently unsubscribed\n             *   without having new callbacks added to it\n             *   while the unsubscribe was in flight, or\n             * - when a pending subscription has its\n             *   listeners removed before a request was\n             *   sent to the server.\n             *\n             * Being that nobody is interested in this\n             * subscription any longer, delete it.\n             */\n            delete this._subscriptionsByHash[hash];\n            if (subscription.state === 'unsubscribed') {\n              delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n            }\n            await this._updateSubscriptions();\n            return;\n          }\n          await (async () => {\n            const {\n              args,\n              method\n            } = subscription;\n            try {\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'subscribing'\n              });\n              const serverSubscriptionId = await this._rpcWebSocket.call(method, args);\n              this._setSubscription(hash, {\n                ...subscription,\n                serverSubscriptionId,\n                state: 'subscribed'\n              });\n              this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n              await this._updateSubscriptions();\n            } catch (e) {\n              if (e instanceof Error) {\n                console.error(\"\".concat(method, \" error for argument\"), args, e.message);\n              }\n              if (!isCurrentConnectionStillActive()) {\n                return;\n              }\n              // TODO: Maybe add an 'errored' state or a retry limit?\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'pending'\n              });\n              await this._updateSubscriptions();\n            }\n          })();\n          break;\n        case 'subscribed':\n          if (subscription.callbacks.size === 0) {\n            // By the time we successfully set up a subscription\n            // with the server, the client stopped caring about it.\n            // Tear it down now.\n            await (async () => {\n              const {\n                serverSubscriptionId,\n                unsubscribeMethod\n              } = subscription;\n              if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                /**\n                 * Special case.\n                 * If we're dealing with a subscription that has been auto-\n                 * disposed by the RPC, then we can skip the RPC call to\n                 * tear down the subscription here.\n                 *\n                 * NOTE: There is a proposal to eliminate this special case, here:\n                 * https://github.com/solana-labs/solana/issues/18892\n                 */\n                this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n              } else {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                try {\n                  await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                } catch (e) {\n                  if (e instanceof Error) {\n                    console.error(\"\".concat(unsubscribeMethod, \" error:\"), e.message);\n                  }\n                  if (!isCurrentConnectionStillActive()) {\n                    return;\n                  }\n                  // TODO: Maybe add an 'errored' state or a retry limit?\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'subscribed'\n                  });\n                  await this._updateSubscriptions();\n                  return;\n                }\n              }\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'unsubscribed'\n              });\n              await this._updateSubscriptions();\n            })();\n          }\n          break;\n      }\n    }));\n  }\n\n  /**\n   * @internal\n   */\n  _handleServerNotification(serverSubscriptionId, callbackArgs) {\n    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n        // I failed to find a way to convince TypeScript that `cb` is of type\n        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n        // See https://github.com/microsoft/TypeScript/issues/47615\n        // @ts-ignore\n        ...callbackArgs);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, AccountNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _makeSubscription(subscriptionConfig,\n  /**\n   * When preparing `args` for a call to `_makeSubscription`, be sure\n   * to carefully apply a default `commitment` property, if necessary.\n   *\n   * - If the user supplied a `commitment` use that.\n   * - Otherwise, if the `Connection::commitment` is set, use that.\n   * - Otherwise, set it to the RPC server default: `finalized`.\n   *\n   * This is extremely important to ensure that these two fundamentally\n   * identical subscriptions produce the same identifying hash:\n   *\n   * - A subscription made without specifying a commitment.\n   * - A subscription made where the commitment specified is the same\n   *   as the default applied to the subscription above.\n   *\n   * Example; these two subscriptions must produce the same hash:\n   *\n   * - An `accountSubscribe` subscription for `'PUBKEY'`\n   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n   *   `'finalized'`.\n   *\n   * See the 'making a subscription with defaulted params omitted' test\n   * in `connection-subscriptions.ts` for more.\n   */\n  args) {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify$1([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending'\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(subscription !== undefined, \"Could not find a `Subscription` when tearing down client subscription #\".concat(clientSubscriptionId));\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(publicKey, callback, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64');\n    return this._makeSubscription({\n      callback,\n      method: 'accountSubscribe',\n      unsubscribeMethod: 'accountUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, ProgramAccountNotificationResult);\n    this._handleServerNotification(subscription, [{\n      accountId: result.value.pubkey,\n      accountInfo: result.value.account\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(programId, callback, commitment, filters) {\n    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64' /* encoding */, filters ? {\n      filters: filters\n    } : undefined /* extra */);\n    return this._makeSubscription({\n      callback,\n      method: 'programSubscribe',\n      unsubscribeMethod: 'programUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(filter, callback, commitment) {\n    const args = this._buildArgs([typeof filter === 'object' ? {\n      mentions: [filter.toString()]\n    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    return this._makeSubscription({\n      callback,\n      method: 'logsSubscribe',\n      unsubscribeMethod: 'logsUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  async removeOnLogsListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, LogsNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotSubscribe',\n      unsubscribeMethod: 'slotUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotUpdateNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotsUpdatesSubscribe',\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotUpdateListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n  }\n\n  /**\n   * @internal\n   */\n\n  async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {\n    const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn('Ignored unsubscribe request because an active subscription with id ' + \"`\".concat(clientSubscriptionId, \"` for '\").concat(subscriptionName, \"' events \") + 'could not be found.');\n    }\n  }\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SignatureNotificationResult);\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n      type: 'received'\n    }, result.context] : [{\n      type: 'status',\n      result: result.value\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(signature, callback, commitment) {\n    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(signature, callback, options) {\n    const {\n      commitment,\n      ...extra\n    } = {\n      ...options,\n      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n    };\n    const args = this._buildArgs([signature], commitment, undefined /* encoding */, extra);\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        callback(notification, context);\n        // Signatures subscriptions are auto-removed by the RPC service\n        // so no need to explicitly send an unsubscribe message.\n        try {\n          this.removeSignatureListener(clientSubscriptionId);\n          // eslint-disable-next-line no-empty\n        } catch (_err) {\n          // Already removed.\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSignatureListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, RootNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'rootSubscribe',\n      unsubscribeMethod: 'rootUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeRootChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n  }\n}\n\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n    this._keypair = keypair !== null && keypair !== void 0 ? keypair : generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate() {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(secretKey, options) {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed) {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey() {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nconst LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('recentSlot'), BufferLayout.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\nclass AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [layoutType, layout] of Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == index) {\n        type = layoutType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n    }\n    return type;\n  }\n  static decodeCreateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n    const {\n      recentSlot\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data);\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot)\n    };\n  }\n  static decodeExtendLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\"invalid instruction; found \".concat(instruction.keys.length, \" keys, expected at least 2\"));\n    }\n    const {\n      addresses\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer))\n    };\n  }\n  static decodeCloseLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey\n    };\n  }\n  static decodeFreezeLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n  static decodeDeactivateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n    }\n  }\n}\nclass AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static createLookupTable(params) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync([params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)], this.programId);\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed\n    });\n    const keys = [{\n      pubkey: lookupTableAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return [new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    }), lookupTableAddress];\n  }\n  static freezeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static extendLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes())\n    });\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (params.payer) {\n      keys.push({\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static deactivateLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static closeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.recipient,\n      isSigner: false,\n      isWritable: true\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n}\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\n\n/**\n * Compute Budget Instruction class\n */\nclass ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units,\n      additionalFee\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);\n    return {\n      units,\n      additionalFee\n    };\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      bytes\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);\n    return {\n      bytes\n    };\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);\n    return {\n      units\n    };\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      microLamports\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);\n    return {\n      microLamports\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * Request units instruction params\n */\n\n/**\n * Request heap frame instruction params\n */\n\n/**\n * Set compute unit limit instruction params\n */\n\n/**\n * Set compute unit price instruction params\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nconst COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nclass ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static requestHeapFrame(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitLimit(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitPrice(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports)\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n}\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, \"Public Key must be \".concat(PUBLIC_KEY_BYTES$1, \" bytes but received \").concat(publicKey.length, \" bytes\"));\n    assert(signature.length === SIGNATURE_BYTES, \"Signature must be \".concat(SIGNATURE_BYTES, \" bytes but received \").concat(signature.length, \" bytes\"));\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, \"Private key must be \".concat(PRIVATE_KEY_BYTES$1, \" bytes but received \").concat(privateKey.length, \" bytes\"));\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(\"Error creating instruction; \".concat(error));\n    }\n  }\n}\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\nconst ecdsaSign = (msgHash, privKey) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery];\n};\nsecp256k1.utils.isValidPrivateKey;\nconst publicKeyCreate = secp256k1.getPublicKey;\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, \"Public key must be \".concat(PUBLIC_KEY_BYTES, \" bytes but received \").concat(publicKey.length, \" bytes\"));\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(\"Error constructing Ethereum address: \".concat(error));\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, \"Address must be \".concat(ETHEREUM_ADDRESS_BYTES, \" bytes but received \").concat(ethAddress.length, \" bytes\"));\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, \"Private key must be \".concat(PRIVATE_KEY_BYTES, \" bytes but received \").concat(pkey.length, \" bytes\"));\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false /* isCompressed */).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(\"Error creating instruction; \".concat(error));\n    }\n  }\n}\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\nvar _Lockup;\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n\n/**\n * Stake account authority info\n */\nclass Authorized {\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    /** stake authority */\n    this.staker = void 0;\n    /** withdraw authority */\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n/**\n * Stake account lockup info\n */\nclass Lockup {\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    /** Unix timestamp of lockup expiration */\n    this.unixTimestamp = void 0;\n    /** Epoch of lockup expiration */\n    this.epoch = void 0;\n    /** Lockup custodian authority */\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n}\n_Lockup = Lockup;\nLockup.default = new _Lockup(0, 0, PublicKey.default);\n/**\n * Create stake account transaction params\n */\n/**\n * Create stake account with seed transaction params\n */\n/**\n * Initialize stake instruction params\n */\n/**\n * Delegate stake instruction params\n */\n/**\n * Authorize stake instruction params\n */\n/**\n * Authorize stake instruction params using a derived key\n */\n/**\n * Split stake instruction params\n */\n/**\n * Split with seed transaction params\n */\n/**\n * Withdraw stake instruction params\n */\n/**\n * Deactivate stake instruction params\n */\n/**\n * Merge stake instruction params\n */\n/**\n * Stake Instruction class\n */\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params,\n  // Compute the cost of allocating the new stake account in lamports\n  rentExemptReserve) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: rentExemptReserve,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params,\n  // If this stake account is new, compute the cost of allocating it in lamports\n  rentExemptReserve) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(SystemProgram.transfer({\n        fromPubkey: params.authorizedPubkey,\n        toPubkey: splitStakePubkey,\n        lamports: rentExemptReserve\n      }));\n    }\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n}\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\n/**\n * Max space of a Stake account\n *\n * This is generated from the solana-stake-program StakeState struct as\n * `StakeStateV2::size_of()`:\n * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n */\nStakeProgram.space = 200;\n\n/**\n * Vote account info\n */\nclass VoteInit {\n  /** [0, 100] */\n\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\n\n/**\n * InitializeAccount instruction params\n */\n\n/**\n * Authorize instruction params\n */\n\n/**\n * AuthorizeWithSeed instruction params\n */\n\n/**\n * Withdraw from vote account transaction params\n */\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\n\n/**\n * Vote Instruction class\n */\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType\n      }\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      },\n      votePubkey: instruction.keys[0].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\n/** @internal */\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteAuthorizeWithSeedArgs()])\n  }\n});\n\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      }\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: currentAuthorityDerivedKeyBasePubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error('Withdraw will leave vote account with insufficient funds.');\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      nodePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: nodePubkey,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * Max space of a Vote account\n *\n * This is generated from the solana-vote-program VoteState struct as\n * `VoteState::size_of()`:\n * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n *\n * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n */\nVoteProgram.space = 3762;\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n\n/**\n * @internal\n */\n\n/**\n * Info used to identity validators.\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n\n/**\n * ValidatorInfo class\n */\nclass ValidatorInfo {\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    /**\n     * validator public key\n     */\n    this.key = void 0;\n    /**\n     * validator information\n     */\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(buffer) {\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$1(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n    return null;\n  }\n}\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n\n/**\n * History of how many credits earned by the end of each epoch\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(),\n// votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(),\n// authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(),\n// epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n}\nfunction parseAuthorizedVoter(_ref22) {\n  let {\n    authorizedVoter,\n    epoch\n  } = _ref22;\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\nfunction parsePriorVoters(_ref23) {\n  let {\n    authorizedPubkey,\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  } = _ref23;\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\nfunction getPriorVoters(_ref24) {\n  let {\n    buf,\n    idx,\n    isEmpty\n  } = _ref24;\n  if (isEmpty) {\n    return [];\n  }\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(\"Unknown \".concat(key, \" cluster: \").concat(cluster));\n  }\n  return url;\n}\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n\n// eslint-disable-next-line no-redeclare\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n  let confirmationStrategy;\n  let options;\n  if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'nonceValue')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n  if (status.err) {\n    throw new Error(\"Raw transaction \".concat(signature, \" failed (\").concat(JSON.stringify(status), \")\"));\n  }\n  return signature;\n}\n\n/**\n * There are 1-billion lamports in one SOL\n */\nconst LAMPORTS_PER_SOL = 1000000000;\nexport { Account, AddressLookupTableAccount, AddressLookupTableInstruction, AddressLookupTableProgram, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, Loader, Lockup, MAX_SEED_LENGTH, Message, MessageAccountKeys, MessageV0, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PUBLIC_KEY_LENGTH, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, SolanaJSONRPCError, SolanaJSONRPCErrorCode, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionExpiredBlockheightExceededError, TransactionExpiredNonceInvalidError, TransactionExpiredTimeoutError, TransactionInstruction, TransactionMessage, TransactionStatus, VALIDATOR_INFO_KEY, VERSION_PREFIX_MASK, VOTE_PROGRAM_ID, ValidatorInfo, VersionedMessage, VersionedTransaction, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"names":["generatePrivateKey","ed25519","utils","randomPrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","Uint8Array","set","isOnCurve","ExtendedPoint","fromHex","sign","message","slice","verify","toBuffer","arr","Buffer","isBuffer","from","buffer","byteOffset","byteLength","Struct","constructor","properties","Object","assign","encode","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Enum","enum","keys","length","Error","map","key","Map","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","value","_bn","undefined","uniquePublicKeyCounter","PublicKey","decoded","bs58","BN","unique","equals","eq","toBase58","toBytes","toJSON","buf","b","toArrayLike","zeroPad","alloc","copy","Symbol","toStringTag","concat","toString","createWithSeed","fromPublicKey","seed","programId","publicKeyBytes","sha256","createProgramAddressSync","seeds","forEach","TypeError","createProgramAddress","findProgramAddressSync","nonce","address","seedsWithNonce","err","findProgramAddress","pubkeyData","pubkey","_PublicKey","default","kind","fields","Account","_publicKey","_secretKey","secretKeyBuffer","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","signature","defineProperty","prototype","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","push","writable","readonly","get","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","property","arguments","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","voteAuthorizeWithSeedArgs","getAlloc","type","getItemAlloc","item","field","Array","isArray","elementLayout","layout","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","assert","condition","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","entries","writableSigners","filter","_ref","readonlySigners","_ref2","writableNonSigners","_ref3","readonlyNonSigners","_ref4","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","_ref5","_ref6","_ref7","_ref8","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","state","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","delete","END_OF_BUFFER_ERROR_MESSAGE","guardedShift","byteArray","guardedSplice","_args$","_len","args","_key","start","splice","Message","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","unsignedAccountIndex","numUnsignedAccounts","numWritableUnsignedAccounts","numWritableSignedAccounts","isProgramId","has","programIds","values","nonProgramIds","_","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","seq","signDataLayout","transaction","signData","accountCount","i","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","count","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","lookupAccountKeysIndex","numWritableLookupAccountKeys","reduce","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","MESSAGE_VERSION_0_PREFIX","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","addressTableLookupLayout","maskedPrefix","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","_ref9","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","hasOwnProperty","call","minContextSlot","blockhash","nonceInstruction","signers","_ref10","add","_len2","items","_key2","compileMessage","JSON","stringify","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","x","sort","y","options","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","_ref11","indexOf","_compile","valid","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","_len3","_key3","seen","Set","_len4","_key4","uniqueSigners","signer","_partialSign","partialSign","_len5","_key5","_len6","_key6","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","signatureErrors","_getMessageSignednessErrors","errors","missing","invalid","config","sigErrors","errorMessage","p","join","_serialize","signatureCount","transactionLength","wireTransaction","_ref12","keyObj","populate","sigPubkeyPair","some","TransactionMessage","decompile","compiledIx","compileToLegacyMessage","compileToV0Message","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData$1","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","encodeDecode","bigInt","bigIntLayout","src","toBigIntLE","toBufferLE","u64","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","createAccount","params","transfer","BigInt","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","array","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","deployCommitment","finalizeSignature","context","currentSlot","getSlot","slot","round","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","objToString","objKeys","obj","name","val","isArrayProp","max","propVal","toStr","isFinite","fastStableStringify","returnVal","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","_ref13","customMessage","code","fetchImpl","globalThis","fetch","RpcWebSocketClient","RpcWebSocketCommonClient","generate_request_id","webSocketFactory","url","rpc","createRpc","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","_this$underlyingSocke","readyState","reject","notify","_this$underlyingSocke2","decodeData","LOOKUP_TABLE_META_SIZE","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","makeWebsocketUrl","endpoint","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","websocketPort","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","assertEndpointUrl","putativeUrl","test","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","result","union","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","number","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","validator","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","httpHeaders","customFetch","fetchMiddleware","disableRetryOnRateLimit","httpAgent","agent","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","clientBrowser","RpcClient","request","callback","method","body","headers","COMMON_HTTP_HEADERS","too_many_requests_retries","res","waitTime","statusText","text","ok","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","IsBlockhashValidRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","_commitmentOrConfig","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_requestPromises$requ","_buildArgs","requestHash","fastStableStringify$1","unsafeRes","wsEndpoint","confirmTransactionInitialTimeout","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","getBalance","then","catch","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","encoding","configWithoutEncoding","baseSchema","withContext","getParsedProgramAccounts","strategy","rawSignature","_config$abortSignal","aborted","reason","decodedSignature","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","_ref14","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","done","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","abortConfirmation","removeSignatureListener","_ref15","expiryPromise","checkBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","_ref16","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","_signatureStatus","signatureStatus","_outcome$slotInWhichN","commitmentForStatus","_ref17","timeoutId","timeoutMs","TIMED_OUT","clearTimeout","getClusterNodes","getVoteAccounts","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getInflationRate","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentPrioritizationFees","_config$lockedWritabl","lockedWritableAccounts","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","isBlockhashValid","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","transactionDetails","_ref18","getParsedBlock","getBlockProduction","extra","c","getTransaction","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","_ref19","_ref20","getBlocks","endSlot","getBlockSignatures","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","versionedTx","encodedTransaction","originalTx","sigVerify","traceIndent","logTrace","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","Number","MAX_SAFE_INTEGER","clearInterval","_ref21","hash","_setSubscription","nextSubscription","_this$_subscriptionsB","prevState","stateChangeCallbacks","cb","clientSubscriptionId","_this$_subscriptionSt","close","log","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","decodeCreateLookupTable","checkKeysLength","recentSlot","decodeExtendLookupTable","decodeCloseLookupTable","recipient","decodeFreezeLookupTable","decodeDeactivateLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestUnits","units","additionalFee","RequestUnits","decodeRequestHeapFrame","RequestHeapFrame","decodeSetComputeUnitLimit","SetComputeUnitLimit","decodeSetComputeUnitPrice","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","PRIVATE_KEY_BYTES$1","PUBLIC_KEY_BYTES$1","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","ecdsaSign","msgHash","privKey","secp256k1","toCompactRawBytes","recovery","isValidPrivateKey","publicKeyCreate","PRIVATE_KEY_BYTES","ETHEREUM_ADDRESS_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","_Lockup","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","split","rentExemptReserve","splitWithSeed","merge","withdraw","deactivate","VoteInit","authorizedVoter","authorizedWithdrawer","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","InitializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","currentAuthorityDerivedKeyBasePubkey","authorizedWithdrawerPubkey","VoteProgram","UpdateValidatorIdentity","VoteAuthorizationLayout","Voter","initializeAccount","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","updateValidatorIdentity","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assert$1","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","_ref22","parsePriorVoters","_ref23","epochOfLastAuthorizedSwitch","targetEpoch","_ref24","idx","isEmpty","http","devnet","testnet","https","clusterApiUrl","cluster","tls","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","LAMPORTS_PER_SOL"],"sources":["/workspaces/SOONMOO/node_modules/@solana/web3.js/src/utils/ed25519.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/utils/to-buffer.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/utils/borsh-schema.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/publickey.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/account.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/transaction/constants.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/message/account-keys.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/layout.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/utils/assert.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/message/compiled-keys.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/utils/guarded-array-utils.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/message/legacy.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/message/v0.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/message/versioned.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/transaction/legacy.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/transaction/message.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/transaction/versioned.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/timing.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/sysvar.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/utils/sleep.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/instruction.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/fee-calculator.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/nonce-account.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/utils/bigint.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/programs/system.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/loader.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/bpf-loader.ts","/workspaces/SOONMOO/node_modules/node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/epoch-schedule.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/errors.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/rpc-websocket.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/account-data.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/connection.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/keypair.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/programs/compute-budget.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/programs/ed25519.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/utils/secp256k1.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/programs/secp256k1.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/programs/stake.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/programs/vote.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/validator-info.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/vote-account.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/utils/cluster.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/utils/send-and-confirm-raw-transaction.ts","/workspaces/SOONMOO/node_modules/@solana/web3.js/src/index.ts"],"sourcesContent":["import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","const END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nexport function guardedShift<T>(byteArray: T[]): T {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift() as T;\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nexport function guardedSplice<T>(\n  byteArray: T[],\n  ...args:\n    | [start: number, deleteCount?: number]\n    | [start: number, deleteCount: number, ...items: T[]]\n): T[] {\n  const [start] = args;\n  if (\n    args.length === 2 // Implies that `deleteCount` was supplied\n      ? start + (args[1] ?? 0) > byteArray.length\n      : start >= byteArray.length\n  ) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(\n    ...(args as Parameters<typeof Array.prototype.splice>),\n  );\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray),\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(\n      guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n    );\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(\n        byteArray,\n        0,\n        accountKeyIndexesLength,\n      );\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = guardedSplice(\n        byteArray,\n        0,\n        writableIndexesLength,\n      );\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(\n        byteArray,\n        0,\n        readonlyIndexesLength,\n      );\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\nimport {guardedSplice} from '../utils/guarded-array-utils';\n\n/** @internal */\ntype MessageSignednessErrors = {\n  invalid?: PublicKey[];\n  missing?: PublicKey[];\n};\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      } as Intl.CollatorOptions;\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures: boolean = true): boolean {\n    const signatureErrors = this._getMessageSignednessErrors(\n      this.serializeMessage(),\n      requireAllSignatures,\n    );\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(\n    message: Uint8Array,\n    requireAllSignatures: boolean,\n  ): MessageSignednessErrors | undefined {\n    const errors: MessageSignednessErrors = {};\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(\n        signData,\n        requireAllSignatures,\n      );\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${\n            sigErrors.invalid.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${\n            sigErrors.missing.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {AccountKeysFromLookups} from '../message/account-keys';\nimport assert from '../utils/assert';\nimport {toBuffer} from '../utils/to-buffer';\nimport {Blockhash} from '../blockhash';\nimport {Message, MessageV0, VersionedMessage} from '../message';\nimport {PublicKey} from '../publickey';\nimport {AddressLookupTableAccount} from '../programs';\nimport {AccountMeta, TransactionInstruction} from './legacy';\n\nexport type TransactionMessageArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\nexport type DecompileArgs =\n  | {\n      accountKeysFromLookups: AccountKeysFromLookups;\n    }\n  | {\n      addressLookupTableAccounts: AddressLookupTableAccount[];\n    };\n\nexport class TransactionMessage {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n\n  constructor(args: TransactionMessageArgs) {\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(\n    message: VersionedMessage,\n    args?: DecompileArgs,\n  ): TransactionMessage {\n    const {header, compiledInstructions, recentBlockhash} = message;\n\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = header;\n\n    const numWritableSignedAccounts =\n      numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n\n    const numWritableUnsignedAccounts =\n      message.staticAccountKeys.length -\n      numRequiredSignatures -\n      numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error(\n        'Failed to decompile message because no account keys were found',\n      );\n    }\n\n    const instructions: TransactionInstruction[] = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys: AccountMeta[] = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(\n            `Failed to find key for account key index ${keyIndex}`,\n          );\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable =\n            keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable =\n            keyIndex - accountKeys.staticAccountKeys.length <\n            // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n            accountKeys.accountKeysFromLookups!.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable,\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(\n          `Failed to find program id for program id index ${compiledIx.programIdIndex}`,\n        );\n      }\n\n      instructions.push(\n        new TransactionInstruction({\n          programId,\n          data: toBuffer(compiledIx.data),\n          keys,\n        }),\n      );\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash,\n    });\n  }\n\n  compileToLegacyMessage(): Message {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n    });\n  }\n\n  compileToV0Message(\n    addressLookupTableAccounts?: AddressLookupTableAccount[],\n  ): MessageV0 {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\nimport {guardedSplice} from '../utils/guarded-array-utils';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport RpcWebSocketBrowserFactory from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport {\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n} from 'rpc-websockets/dist/lib/client/client.types';\n\nimport createRpc from './rpc-websocket-factory';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends RpcWebSocketCommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = (\n          rpc as ReturnType<typeof RpcWebSocketBrowserFactory>\n        ).socket;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<RpcWebSocketCommonClient['call']>\n  ): ReturnType<RpcWebSocketCommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<RpcWebSocketCommonClient['notify']>\n  ): ReturnType<RpcWebSocketCommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\nexport type IsBlockhashValidConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of base58-encoded account addresses to return post simulation state for */\n  accounts?: {\n    /** The encoding of the returned account's data */\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: nullable(ConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(\n    blockhash: Blockhash,\n    rawConfig?: IsBlockhashValidConfig,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs(\n      [blockhash],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to determine if the blockhash `' + blockhash + '`is valid',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      skipPreflight === true\n        ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n        : (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeStateV2::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(\n    params: SplitStakeParams,\n    // Compute the cost of allocating the new stake account in lamports\n    rentExemptReserve: number,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: rentExemptReserve,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(\n    params: SplitStakeWithSeedParams,\n    // If this stake account is new, compute the cost of allocating it in lamports\n    rentExemptReserve?: number,\n  ): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(\n        SystemProgram.transfer({\n          fromPubkey: params.authorizedPubkey,\n          toPubkey: splitStakePubkey,\n          lamports: rentExemptReserve,\n        }),\n      );\n    }\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\nexport type UpdateValidatorIdentityParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  nodePubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'InitializeAccount'\n  | 'Withdraw'\n  | 'UpdateValidatorIdentity';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n  UpdateValidatorIdentity: IInstructionInputData;\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: BufferLayout.struct<\n      VoteInstructionInputData['UpdateValidatorIdentity']\n    >([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = 3762;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insufficient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(\n    params: UpdateValidatorIdentityParams,\n  ): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, nodePubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\nimport {guardedShift, guardedSplice} from './utils/guarded-array-utils';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n  DurableNonceTransactionConfirmationStrategy,\n  TransactionConfirmationStrategy,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: TransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | TransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy: TransactionConfirmationStrategy | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'nonceValue',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as DurableNonceTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"mappings":"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AAa,EAAEjU,IAAI,CAAC;IAClB6uB,oBAAoB,EAAE/L,MAAM;GAC7B;AACH,CAAC,CACH,CACF,CAAC;;AAED;AACA;AACA;AACA,MAAMwM,uBAAuB,GAAG5M,aAAa,CAACtB,MAAM,EAAE,CAAC;;AAEvD;AACA;AACA;AACA,MAAMmO,wBAAwB,GAAG7M,aAAa,CAACtB,MAAM,EAAE,CAAC;;AAExD;AACA;AACA;;AAUA;AACA;AACA;;AAUA;AACA;AACA;;AAUA;AACA;AACA;;AAQA;AACA;AACA;;AAUA;AACA;AACA;;AAMA;AACA;AACA;;AAGA;AACA;AACA;;AAwBA;AACA;AACA;;AAUA;AACA;AACA;;AAUA;AACA;AACA;;AAUA;AACA;AACA;;AAQA;AACA;AACA;;AAQA;AACA;AACA;;AAQA;AACA;AACA;;AAQA;AACA;AACA;;AAcA;AACA;AACA;;AAMA;AACA;AACA;;AAMA;AACA;AACA;;AAMA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;;AAMA;AACA;AACA;;AAMA;AACA;AACA;;AAKA;AACA;AACA;;AAMA;AACA;AACA;;AAMA;AACA;AACA;;AAGA;AACA;AACA;AACA,MAAMoO,UAAU,GAAGxvB,IAAI,CAAC;EACtBpE,GAAG,EAAEgpB,sBAAsB;EAC3BjI,IAAI,EAAErD,KAAK,CAAC8H,MAAM,EAAE,CAAC;EACrBvkB,SAAS,EAAEukB,MAAM;AACnB,CAAC,CAAC;;AAEF;AACA;AACA;;AAOA;AACA;AACA;AACA,MAAMqO,sBAAsB,GAAGzvB,IAAI,CAAC;EAClCkiB,MAAM,EAAEa,4BAA4B,CAACyM,UAAU,CAAC;EAChD5F,YAAY,EAAE9G,MAAM;AACtB,CAAC,CAAC;;AAEF;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;;AAKA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;;AAYA;AACA;AACA;;AAgBA;AACA;AACA;;AAQA;AACA;AACA;;AAGA;AACA;AACA;;AAOA;AACA;AACA;;AAwBA;AACA,MAAM+D,mBA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","ignoreList":[]},"metadata":{},"sourceType":"module"}